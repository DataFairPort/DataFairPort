.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "FAIR::Profile::Parser 3"
.TH FAIR::Profile::Parser 3 "2015-07-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FAIR::Profile::Parser \- Parser that reads FAIR Profile RDF and creates a FAIR::Profile object
.SH "VERSION"
.IX Header "VERSION"
version 0.216
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use FAIR::Profile::Parser;
\&
\& my $parser = FAIR::Profile::Parser\->new(filename => "./ProfileSchema.rdf");
\& my $DatasetSchema = $parser\->parse;
\&
\& my $schema =  $DatasetSchema\->serialize;
\& open(OUT, ">ProfileSchema2.rdf")
\& print OUT $schema;
\& close OUT;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1FAIR\s0 Profiles describe the metadata elements, and constrained values, that should be
associated with a given information entity.  They \s-1ARE\s0 \s-1NOT\s0 containers for this metadata,
they only describe what that metadata should look like (meta-meta-data :\-) )
.PP
This module will parse an \s-1RDF\s0 file containing a \s-1FAIR\s0 Profile into
objects that can be used to construct a metadata capture interface.
The objects will tell you what fields are required/optional, and what possible
values they are allowed to contain.
.SH "NAME"
FAIR::Profile::Parser \- a module for reading FAIR Profile RDF files
.SH "AUTHORS"
.IX Header "AUTHORS"
Mark Wilkinson (markw at illuminae dot com)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title : new
\& Usage : my $ProfileParser = FAIR::Profile::Parser\->new();
\& Function: Builds a new FAIR::Profile::Parser
\& Returns : FAIR::Profile::Parser
\& Args : filename => $filename
\&        model => $model (an existing RDF::Trine::Model \-
\&                if you don\*(Aqt supply this it will be created for you)
.Ve
.SS "parse"
.IX Subsection "parse"
.Vb 5
\& Title : parse
\& Usage : my $ProfileObject = $ProfileParser\->parse();
\& Function: parse the file associated with the Parser
\& Returns : FAIR::Profile
\& Args : none
.Ve
.SS "filename"
.IX Subsection "filename"
.Vb 5
\& Title : filename
\& Usage : $ProfileParser\->filename($filename);
\& Function: associate a file with the parser
\& Returns : null
\& Args : full or relative path to the file to be parsed
.Ve
.SS "data"
.IX Subsection "data"
.Vb 5
\& Title : data
\& Usage : $ProfileParser\->data($rdfdata);
\& Function: associate a data string with the parser
\& Returns : null
\& Args : string of RDF in the format specified in $Parser\->data_format
.Ve
.SS "data_format"
.IX Subsection "data_format"
.Vb 5
\& Title : data_format
\& Usage : $ProfileParser\->data_format($format);
\& Function: the format of the RDF data in \->data (if any)
\& Returns : null
\& Args : rdfxml | turtle | ntriples | nquads (or any type acceptable to RDF::Trine)
.Ve
.SS "model"
.IX Subsection "model"
.Vb 5
\& Title : model
\& Usage : $ProfileParser\->model($RDFTrineModel);
\& Function: associate an RDF::Trine::Model with the parser
\& Returns : null
\& Args : RDF::Trine::Model (this will be created for you, if not supplied)
.Ve
.SS "profile"
.IX Subsection "profile"
.Vb 5
\& Title : profile
\& Usage : $Profile = $ProfileParser\->profile;
\& Function: retrieve the profile after a parse.  Must parse first!
\& Returns : FAIR::Profile
\& Args : none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Denis Wilkinson (markw [at] illuminae [dot] com)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Mark Denis Wilkinson.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
