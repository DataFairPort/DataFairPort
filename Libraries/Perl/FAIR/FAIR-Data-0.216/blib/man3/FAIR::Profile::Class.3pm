.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "FAIR::Profile::Class 3"
.TH FAIR::Profile::Class 3 "2015-07-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FAIR::Profile::Class \- A FAIR Class is a meta representation of a data resources Class
.SH "VERSION"
.IX Header "VERSION"
version 0.216
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use FAIR::Profile::Class;
\& use FAIR::Profile::Property;
\& 
\& my $ProfileClass = FAIR::Profile::Class\->new(
\&    class_type => DCAT."dataset",  # DCAT is an exported constant
\&    URI => "http://example.org//ProfileClasses/ThisClass.rdf",
\&    label => "core metadata for the thesis submission"
\&   );
\&
\& my $TitleProperty = FAIR::Profile::Property\->new(
\&    property_type => DCT.\*(Aqtitle\*(Aq, # DCT is an exported constant
\&    allow_multiple => "false",
\& );
\& $TitleProperty\->set_RequirementStatus(\*(Aqrequired\*(Aq);
\& $TitleProperty\->add_ValueRange(XSD."string");
\& $ProfileClass\->add_Property($TitleProperty);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DCAT\s0 Class describes a group of metadata elements that should be
associated with a given information entity.  They \s-1ARE\s0 \s-1NOT\s0 containers for this metadata,
they only describe what that metadata should look like (meta-meta-data :\-) )
.PP
Effectively, this module groups-together a set of properties and their value-constraints.
.SH "NAME"
FAIR::Profile::Class \- a module representing a FAIR Profile Class
.SH "AUTHORS"
.IX Header "AUTHORS"
Mark Wilkinson (markw at illuminae dot com)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title : new
\& Usage : my $Class = FAIR::Profile::Class\->new();
\& Function: Builds a new FAIR::Profile::Class
\& Returns : FAIR::Profile::Class
\& Args : label => $string
\&        class_type => $URI (possibly an OWL class URI)
\&        URI => $URI (optional \- a unique URI will be auto\-generated)
.Ve
.SS "label"
.IX Subsection "label"
.Vb 5
\& Title : label
\& Usage : $label = $Class\->label($label);
\& Function: get/set the RDF label for this object when serialized
\& Returns : string
\& Args : string
.Ve
.SS "onClassType"
.IX Subsection "onClassType"
.Vb 5
\& Title : onClassType
\& Usage : $class_type = $Class\->onClassType($class_type);
\& Function: get/set the class type (should be a URI, e.g. of an ontology class)
\& Returns : string
\& Args : string
.Ve
.SS "\s-1URI\s0"
.IX Subsection "URI"
.Vb 6
\& Title : URI
\& Usage : $uri = $Class\->URI($uri);
\& Function: get/set the URI for this Class \- the URI in the RDF
\& Returns : string  (should be a URI)
\& Args : string   (should be a URI)
\& notes:  if this is not supplied, a unique URI will be automatically generated
.Ve
.SS "add_Property"
.IX Subsection "add_Property"
.Vb 5
\& Title : add_Property
\& Usage : $Class\->add_Property($Property);
\& Function: add a new FAIR::Profile::Property to the Profile Class
\& Returns : boolean (1 for success)
\& Args : FAIR::Profile::Property
.Ve
.SS "hasProperty"
.IX Subsection "hasProperty"
.Vb 5
\& Title : hasProperty
\& Usage : $Class\->hasProperty();
\& Function: Retrieve all properties of the Class
\& Returns : listref of FAIR::Profile::Property objects
\& Args : none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Denis Wilkinson (markw [at] illuminae [dot] com)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Mark Denis Wilkinson.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
