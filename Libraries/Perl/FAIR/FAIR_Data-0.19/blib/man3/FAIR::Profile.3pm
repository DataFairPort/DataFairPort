.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "FAIR::Profile 3"
.TH FAIR::Profile 3 "2015-06-11" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FAIR::Profile \- the base class representing a FAIR Profile.  Everything else is attached to this
.SH "VERSION"
.IX Header "VERSION"
version 0.19
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use FAIR;
\& use FAIR::Profile::Parser;
\& use FAIR::Profile;
\& 
\& my $parser = FAIR::Profile::Parser\->new(filename => "./ProfileSchema.rdf");
\& my $Profile = $parser\->parse;  # A DCAT::Profile from a file
\&
\& my $Profile2 = FAIR::Profile\->new(
\&                label => \*(AqUBC Thesis Submission Profile\*(Aq,
\&                title => \*(AqUBC Thesis Submission Profile\*(Aq
\&                description => \*(Aqthe metadata that must be associated with thesis deposition\*(Aq,
\&                modified => \*(AqMay 21, 2014\*(Aq,
\&                license => \*(AqCC\*(Aq,
\&                issued => \*(AqMay 21, 2014,
\&                organization => \*(AqUniversity of British Columbia\*(Aq,
\&                identifier => \*(Aqdoi:123.123.123\*(Aq,
\&                URI => \*(Aqhttp://ubc.ca/library/thesis/metadataprofile.rdf\*(Aq
\& )
\& 
\& my $ProfileClass = FAIR::Profile::Class\->new(
\&    class_type => FAIR."dataset",  # DCAT is an exported constant
\&    URI => "http://datafairport.org/examples/ProfileSchemas/DCATDatasetExample.rdf",
\&   );
\&
\& my $TitleProperty = FAIR::Profile::Property\->new(
\&    property_type => DCT.\*(Aqtitle\*(Aq, # DCT is an exported constant
\&    allow_multiple => "false",
\& );
\& $TitleProperty\->set_RequirementStatus(\*(Aqrequired\*(Aq);
\& $TitleProperty\->add_ValueRange(XSD."string");
\& $ProfileClass\->add_Property($TitleProperty);
\&
\&
\& my $DescrProperty = FAIR::Profile::Property\->new(
\&    property_type => DCT.\*(Aqdescription\*(Aq,
\&    allow_multiple => "false",
\& );
\& $DescrProperty\->set_RequirementStatus(\*(Aqrequired\*(Aq);
\& $DescrProperty\->add_ValueRange(XSD."string"); # XSD is an exported constant
\& $ProfileClass\->add_Property($DescrProperty);
\&
\& $Profile2\->add_Class($DCATDatasetClass);
\&
\& my $profileRDF =  $Profile2\->serialize;
\& open(OUT, ">ProfileSchema.rdf") or die "$!\en";
\& print OUT $schema;
\& close OUT;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1DCAT\s0 Profiles describe the metadata elements, and constrained values, that should be
associated with a given information entity.  They \s-1ARE\s0 \s-1NOT\s0 containers for this metadata,
they only describe what that metadata should look like (meta-meta-data :\-) )
.PP
This module represents a \s-1DCAT\s0 Profile, and can be serialized into \s-1RDF\s0.
The objects it contains (classes and properties) will tell you what metadata fields
are required/optional, and what possible values they are allowed to contain.
.PP
\&\s-1DCAT\s0 Profiles are not part of the official \s-1DCAT\s0 specification, but the idea was raised
by the \s-1DCAT\s0 working group as something that might be useful... it
certainly is!
.SH "NAME"
FAIR::Profile \- a module representing a DCAT Profile.
.SH "AUTHORS"
.IX Header "AUTHORS"
Mark Wilkinson (markw at illuminae dot com)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title : new
\& Usage : my $ProfileParser = DCAT::Profile\->new();
\& Function: Builds a new DCAT::Profile
\& Returns : DCAT::Profile
\& Args : label => $string
\&        title => $string
\&        description => $string
\&        modified => $date
\&        license => $string
\&        issued => $date
\&        organization => $string
\&        identifier => $string
\&        URI => $URI (optional \- a unique URI will be auto\-generated)
.Ve
.SS "label"
.IX Subsection "label"
.Vb 5
\& Title : label
\& Usage : $label = $Profile\->label($label);
\& Function: get/set the RDF label for this object when serialized
\& Returns : string
\& Args : string
.Ve
.SS "title"
.IX Subsection "title"
.Vb 5
\& Title : title
\& Usage : $title = $Profile\->title($title);
\& Function: get/set the title of this Profile
\& Returns : string
\& Args : string
.Ve
.SS "description"
.IX Subsection "description"
.Vb 5
\& Title : description
\& Usage : $desc = $Profile\->description($desc);
\& Function: get/set the description of this Profile
\& Returns : string
\& Args : string
.Ve
.SS "modified"
.IX Subsection "modified"
.Vb 5
\& Title : modified
\& Usage : $date = $Profile\->modified($date);
\& Function: get/set the modified date of this Profile
\& Returns : string  (one day this will be more rigorous!)
\& Args : string (one day this will be more rigorous!)
.Ve
.SS "issued"
.IX Subsection "issued"
.Vb 5
\& Title : issued
\& Usage : $date = $Profile\->issued($date);
\& Function: get/set the created/issued date of this Profile
\& Returns : string  (one day this will be more rigorous!)
\& Args : string (one day this will be more rigorous!)
.Ve
.SS "organization"
.IX Subsection "organization"
.Vb 5
\& Title : organization
\& Usage : $name = $Profile\->organization($name);
\& Function: get/set the organization who created this Profile
\& Returns : string  (should probably be a URI... one day)
\& Args : string  (should probably be a URI... one day)
.Ve
.SS "identifier"
.IX Subsection "identifier"
.Vb 5
\& Title : identifier
\& Usage : $id = $Profile\->identifier($id);
\& Function: get/set the unique identifier for this Profile
\& Returns : string  (should be a URI or a DOI if available)
\& Args : string   (should be a URI or a DOI if available)
.Ve
.SS "\s-1URI\s0"
.IX Subsection "URI"
.Vb 6
\& Title : URI
\& Usage : $uri = $Profile\->URI($uri);
\& Function: get/set the URI for this Profile \- the root URI in the RDF
\& Returns : string  (should be a URI)
\& Args : string   (should be a URI)
\& notes:  if this is not supplied, a unique URI will be automatically generated
.Ve
.SS "add_Class"
.IX Subsection "add_Class"
.Vb 5
\& Title : add_Class
\& Usage : $Profile\->add_Class($Class);
\& Function: add a new DCAT::Profile::Class to the Profile
\& Returns : boolean (1 for success)
\& Args : DCAT::Profile::Class
.Ve
.SS "has_class"
.IX Subsection "has_class"
.Vb 7
\& Title : has_class
\& Usage : $Profile\->has_class();
\& Function: retrieve all Classes for the profile
\& Returns : listref of DCAT::Profile::Class objects
\& Args : none
\& Note:  the capitalization of the method name
\&        matches the capitalization of the RDF predicate...
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Wilkinson (markw [at] illuiminae [dot] com)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2015 by Mark Wilkinson.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
