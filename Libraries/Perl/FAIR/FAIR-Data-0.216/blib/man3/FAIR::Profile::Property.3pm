.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "FAIR::Profile::Property 3"
.TH FAIR::Profile::Property 3 "2015-07-15" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
FAIR::Profile::Property \- to represent a Property in a FAIR Profile
.SH "VERSION"
.IX Header "VERSION"
version 0.216
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use FAIR::Profile::Class;
\& use FAIR::Profile::Property;
\& 
\& my $ProfileClass = FAIR::Profile::Class\->new(
\&    class_type => FAIR."dataset",  # DCAT is an exported constant
\&    URI => "http://example.org//ProfileClasses/ThisClass.rdf",
\&    label => "core metadata for the thesis submission"
\&   );
\&
\& my $TitleProperty = FAIR::Profile::Property\->new(
\&    property_type => DCT.\*(Aqtitle\*(Aq, # DCT is an exported constant
\&    allow_multiple => "false",
\& );
\& $TitleProperty\->set_RequirementStatus(\*(Aqrequired\*(Aq);
\& $TitleProperty\->add_ValueRange(XSD."string");
\& $ProfileClass\->add_Property($TitleProperty);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\s-1FAIR\s0 Property describes a single metadata element, and its possible values.
It \s-1IS\s0 \s-1NOT\s0 a containers for this metadata,
it only describes what that metadata should look like (meta-meta-data :\-) )
.PP
Effectively, in \s-1RDF\s0 terms, this is the predicate associated with the metadata, and it's ranges
.SH "NAME"
FAIR::Profile::Property \- a module representing a DCAT Profile Property
.SH "AUTHORS"
.IX Header "AUTHORS"
Mark Wilkinson (markw at illuminae dot com)
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title : new
\& Usage : my $Property = FAIR::Profile::Property\->new();
\& Function: Builds a new FAIR::Profile::Property
\& Returns : FAIR::Profile::Property
\& Args : label => $string
\&        property_type => $URI (possibly an OWL predicate URI)
\&        allow_multiple => $boolean (\*(Aqtrue\*(Aq/\*(Aqfalse\*(Aq)
\&        URI => $URI (optional \- a unique URI will be auto\-generated)
.Ve
.SS "label"
.IX Subsection "label"
.Vb 5
\& Title : label
\& Usage : $label = $Property\->label($label);
\& Function: get/set the RDF label for this object when serialized
\& Returns : string
\& Args : string
.Ve
.SS "property_type"
.IX Subsection "property_type"
.Vb 5
\& Title : property_type
\& Usage : $property_type = $Property\->property_type($property_type);
\& Function: get/set the property type (should be a URI, e.g. of an ontology predicate)
\& Returns : string (URI)
\& Args : string (URI)
.Ve
.SS "\s-1URI\s0"
.IX Subsection "URI"
.Vb 6
\& Title : URI
\& Usage : $uri = $Property\->URI($uri);
\& Function: get/set the URI for this Property \- the URI in the RDF
\& Returns : string  (should be a URI)
\& Args : string   (should be a URI)
\& notes:  if this is not supplied, a unique URI will be automatically generated
.Ve
.SS "set_MinCount"
.IX Subsection "set_MinCount"
.Vb 5
\& Title : set_MinCount
\& Usage : $req = $Property\->set_MinCount($int);
\& Function: minimum number of occurrences of this property
\& Returns : int
\& Args : int
.Ve
.SS "set_MinCount"
.IX Subsection "set_MinCount"
.Vb 5
\& Title : set_MaxCount
\& Usage : $req = $Property\->set_MaxCount($int);
\& Function: maximum number of occurrences of this property
\& Returns : int
\& Args : int
.Ve
.SS "add_ValueRange"
.IX Subsection "add_ValueRange"
.Vb 9
\& Title : add_ValueRange
\& Usage : $Property\->add_ValueRange($URI);
\& Function: add a range restriction for this predicate
\& Returns : none
\& Args : string \- the string should be a URI...
\& Notes:  This is the "critical bit" of the FAIR Profile.  The ranges
\&         can be defined by one of:  the URI of an XSD datatype, the URI
\&         to a SKOS view of a set of ontology terms (according to Jupp et al, 2013)
\&         or the URI to another FAIR::Profile (in this way, profiles can be hierarchical)
.Ve
.SS "allowedValues"
.IX Subsection "allowedValues"
.Vb 5
\& Title : allowedValues
\& Usage : $req = $Property\->allowedValues();
\& Function: retrieve the value ranges for the property
\& Returns : listref of URIs (see add_ValueRange for details)
\& Args : none
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Mark Denis Wilkinson (markw [at] illuminae [dot] com)
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2015 by Mark Denis Wilkinson.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Apache License, Version 2.0, January 2004
.Ve
